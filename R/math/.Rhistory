mydata <- read.table("/Users/pengkailong/Downloads/math_test_norm_no_nan", header=FALSE,
sep=",")
fit <- princomp(mydata, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
# Varimax Rotated Principal Components
# retaining 5 components
library(psych)
fit <- principal(mydata, nfactors=5, rotate="varimax")
fit # print results
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(mydata, 3, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7) # add variable names
# Principal Axis Factor Analysis
library(psych)
fit <- factor.pa(mydata, nfactors=3, rotation="varimax")
fit # print results
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(mydata)) # get eigenvalues
ap <- parallel(subject=nrow(mydata),var=ncol(mydata),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
install.packages("psych")
install.packages("nFactors")
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(mydata)) # get eigenvalues
ap <- parallel(subject=nrow(mydata),var=ncol(mydata),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
# PCA Variable Factor Map
library(FactoMineR)
result <- PCA(mydata) # graphs generated automatically
install.packages("FactoMineR")
# PCA Variable Factor Map
library(FactoMineR)
result <- PCA(mydata) # graphs generated automatically
# Simple CFA Model
library(sem)
mydata.cov <- cov(mydata)
model.mydata <- specify.model()
install.packages("sem")
library(sem)
mydata.cov <- cov(mydata)
model.mydata <- specify.model()
mydata.sem <- sem(model.mydata, mydata.cov, nrow(mydata))
# print results (fit indices, paramters, hypothesis tests)
summary(mydata.sem)
# print standardized coefficients (loadings)
std.coef(mydata.sem)
model.mydata
mydata.sem
mydata.sem <- sem(model.mydata, mydata.cov, nrow(mydata))
# print results (fit indices, paramters, hypothesis tests)
summary(mydata.sem)
# print standardized coefficients (loadings)
std.coef(mydata.sem)
1mydata.sem <- sem(model.mydata, mydata.cov, nrow(mydata))
mysdata.sem <- sem(model.mydata, mydata.cov, nrow(mydata))
# print results (fit indices, paramters, hypothesis tests)
mydata.sem <- sem(model.mydata, mydata.cov, nrow(mydata))
install.packages("nFactors")
library(nFactors)
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
mydata <- read.table("/Users/pengkailong/Downloads/math_test_norm_no_nan", header=FALSE,
sep=",")
fit <- princomp(mydata, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
# Varimax Rotated Principal Components
# retaining 5 components
library(psych)
fit <- principal(mydata, nfactors=5, rotate="varimax")
fit # print results
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(mydata, 3, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7) # add variable names
# Principal Axis Factor Analysis
library(psych)
fit <- factor.pa(mydata, nfactors=3, rotation="varimax")
fit # print results
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(mydata)) # get eigenvalues
ap <- parallel(subject=nrow(mydata),var=ncol(mydata),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
# PCA Variable Factor Map
library(FactoMineR)
result <- PCA(mydata) # graphs generated automatically
# Simple CFA Model
library(sem)
mydata.cov <- cov(mydata)
model.mydata <- specify.model()
mydata.sem <- sem(model.mydata, mydata.cov, nrow(mydata))
# print results (fit indices, paramters, hypothesis tests)
summary(mydata.sem)
# print standardized coefficients (loadings)
std.coef(mydata.sem)
install.packages("nFactors")
# install.packages("nFactors")
library(nFactors)
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
mydata <- read.table("/Users/pengkailong/Downloads/math_test_norm_no_nan", header=FALSE,
sep=",")
fit <- princomp(mydata, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
# Varimax Rotated Principal Components
# retaining 5 components
library(psych)
fit <- principal(mydata, nfactors=5, rotate="varimax")
fit # print results
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(mydata, 3, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7) # add variable names
# Principal Axis Factor Analysis
library(psych)
fit <- factor.pa(mydata, nfactors=3, rotation="varimax")
fit # print results
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(mydata)) # get eigenvalues
ap <- parallel(subject=nrow(mydata),var=ncol(mydata),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
# PCA Variable Factor Map
library(FactoMineR)
result <- PCA(mydata) # graphs generated automatically
# Simple CFA Model
library(sem)
mydata.cov <- cov(mydata)
model.mydata <- specify.model()
mydata.sem <- sem(model.mydata, mydata.cov, nrow(mydata))
# print results (fit indices, paramters, hypothesis tests)
summary(mydata.sem)
# print standardized coefficients (loadings)
std.coef(mydata.sem)
mydata <- read.table("/Users/pengkailong/Downloads/math_test_norm_no_nan", header=FALSE,
sep=",")
fit <- princomp(mydata, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
mydata <- read.table("/Users/pengkailong/Downloads/math_test_norm_no_nan", header=FALSE,
sep=",")
fit <- princomp(mydata, cor=TRUE)
summary(fit) #
loadings(fit) #
plot(fit,type="lines")
fit
plot(fit,type="lines")
plot(fit,type="lines") # scree plot
View(mydata)
View(mydata)
mydata <- read.table("/Users/pengkailong/Downloads/all_test_norm_no_nan.txt", header=TRUE,
sep=",")
View(mydata)
View(mydata)
mydata <- read.table("/Users/pengkailong/Downloads/all_test_norm_no_nan.txt", header=TRUE,
sep=",")
fit <- princomp(mydata, cor=TRUE)
View(mydata)
mydata <- read.table("/Users/pengkailong/Downloads/math_test_norm_no_nan", header=FALSE,
sep=",")
View(mydata)
View(mydata)
mydata <- read.table("/Users/pengkailong/Downloads/all_test_norm_no_nan.txt", header=TRUE,
sep=",")
mydata <- read.table("/Users/pengkailong/Downloads/all_test_norm.txt", header=TRUE,
sep=",")
fit <- princomp(mydata, cor=TRUE)
summary(fit)
loadings(fit) # pc loadings
plot(fit,type="lines") #
close all()
mydata <- read.table("/Users/pengkailong/Downloads/all_test_norm.txt", header=TRUE,
sep=",")
fit <- princomp(mydata, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") #
View(mydata)
fit$scores # the principal components
biplot(fit)
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
library(psych)
fit <- principal(mydata, nfactors=5, rotate="varimax")
fit # print results
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(mydata, 3, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7) # add variable names
# Principal Axis Factor Analysis
library(psych)
fit <- factor.pa(mydata, nfactors=3, rotation="varimax")
fit # print results
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(mydata)) # get eigenvalues
ap <- parallel(subject=nrow(mydata),var=ncol(mydata),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
library(psych)
fit <- factor.pa(mydata, nfactors=3, rotation="varimax")
fit # print
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(mydata)) # get eigenvalues
ev <- eigen(cor(mydata)) # get eigenvalues
ev
mydata
ev <- eigen(cor(mydata)) # get eigenvalues
ap <- parallel(subject=nrow(mydata),var=ncol(mydata),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
ap <- parallel(subject=nrow(mydata),var=ncol(mydata),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
# PCA Variable Factor Map
library(FactoMineR)
result <- PCA(mydata)
# Simple CFA Model
library(sem)
mydata.cov <- cov(mydata)
model.mydata <- specify.model()
summary(mydata.sem)
# print standardized coefficients (loadings)
std.coef(mydata.sem)
install.packages("lavaan")
test.data <- Harman74.cor$cov
test.data <- Harman74.cor$cov
View(test.data)
my.omega <- omega(test.data)
print(my.omega,digits=2)
library(psych)
## Not run:
test.data <- Harman74.cor$cov
# if(!require(GPArotation)) {message("Omega requires GPA rotation" )} else {
my.omega <- omega(test.data)
print(my.omega,digits=2)
library(psych)
test.data <- Harman74.cor$cov
# if(!require(GPArotation)) {message("Omega requires GPA rotation" )} else {
my.omega <- omega(test.data)
install.packages("GPArotation")
library(psych)
library(GPArotation)
## Not run:
test.data <- Harman74.cor$cov
# if(!require(GPArotation)) {message("Omega requires GPA rotation" )} else {
my.omega <- omega(test.data)
print(my.omega,digits=2)
#create 9 variables with a hierarchical structure
v9 <- sim.hierarchical()
#with correlations of
round(v9,2)
#find omega
v9.omega <- omega(v9,digits=2)
v9.omega
#create 8 items with a two factor solution, showing the use of the flip option
sim2 <- item.sim(8)
omega(sim2) #an example of misidentifi
View(test.data)
## The famous Holzinger and Swineford (1939) example
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data=HolzingerSwineford1939)
summary(fit, fit.measures=TRUE)
library(lavaan)
## The famous Holzinger and Swineford (1939) example
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data=HolzingerSwineford1939)
summary(fit, fit.measures=TRUE)
library(lavaan)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data=HolzingerSwineford1939)
View(fit)
summary(fit, fit.measures=TRUE)
HolzingerSwineford1939
data <- HolzingerSwineford1939
View(data)
test.data <- Harman74.cor$cov
# if(!require(GPArotation)) {message("Omega requires GPA rotation" )} else {
my.omega <- omega(test.data)
print(my.omega,digits=2)
#}
library(psych)
library(GPArotation)
## Not run:
test.data <- Harman74.cor$cov
# if(!require(GPArotation)) {message("Omega requires GPA rotation" )} else {
my.omega <- omega(test.data)
print(my.omega,digits=2)
#}
#create 9 variables with a hierarchical structure
v9 <- sim.hierarchical()
#with correlations of
round(v9,2)
v9.omega <- omega(v9,digits=2)
v9.omega
#create 8 items with a two factor solution, showing the use of the flip option
sim2 <- item.sim(8)
omega(sim2) #an example of misidentification-- remember to look at the loadings matrices. omega(sim2,2) #this shows that in fact there is no general factor omega(sim2,2,option="first") #but, if we define one of the two group factors
#as a general factor, we get a falsely high omega
#apply omega to analyze 6 mental ability tests
data(ability.cov)   #has a covariance matrix
omega(ability.cov$cov)
View(test.data)
View(my.omega)
v9 <- sim.hierarchical()
#with correlations of
round(v9,2)
v9 <- sim.hierarchical()
View(v9)
v9 <- sim.hierarchical()
View(v9)
View(v9)
round(v9,2)
round(v9,2)
round(v9,2)
round(v9,2)
View(v9)
v9.omega <- omega(v9,digits=2)
v9 <- sim.hierarchical()
round(v9,2)
v9.omega <- omega(v9,digits=2)
v9.omega
clear all()
#create 8 items with a two factor solution, showing the use of the flip option
sim2 <- item.sim(8)
omega(sim2) #an examp
#simulate 9 variables with a hierarchical structure
v9 <- sim.hierarchical()
#with correlations of
round(v9,2)
#find omega
v9.omega <- omega(v9,digits=2)
v9.omega
#create 8 items with a two factor solution, showing the use of the flip option
sim2 <- item.sim(8)
omega(sim2)
omega(sim2,2)
omega(sim2,2,option="first")
sim2 <- item.sim(8)
omega(sim2)
omega(sim2) #an example of misidentification-- remem
sim2 <- item.sim(8)
omega(sim2) #an e
sim2 <- item.sim(8)
omega(sim2) #an example of mi
of misidentification-- remember to look at the loadings matrices.
omega(sim2,2) #this shows that
omega(sim2) #an example of misidentific
#apply omega to analyze 6 mental ability tests
data(ability.cov)
#has a covariance matrix
omega(ability.cov$cov)
sim2 <- item.sim(8)
omega(sim2) #an example of misidentification-- remember to look at the loadings matrices.
View(sim2)
sim2 <- item.sim(8)
omega(sim2) #an example of misidentification-- remember to look at the loadings matrices.
omega(sim2,2)
sim2 <- item.sim(8)
omega(sim2)
clc
sim2 <- item.sim(8)
omega(sim2) #a
library(nFactors)
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
mydata <- read.table("/Users/pengkailong/Downloads/math_test_norm_no_nan", header=FALSE,
sep=",")
mydata <- read.table("/Users/pengkailong/Downloads/all_test_norm.txt", header=TRUE,
sep=",")
fit <- princomp(mydata, cor=TRUE)
getwd
getwd()
dir <- "/Users/pengkailong/Desktop/Yale/courses/rotation/Dustin Scheinost/Scheinost-Lab/R/math"
setwd(dir)
getwd()
mydata <- read.table("raw_data/math_test_norm_no_nan", header=FALSE,
sep=",")
mydata <- read.table("~/raw_data/math_test_norm_no_nan", header=FALSE,
sep=",")
getwd()
dir <- "/Users/pengkailong/Desktop/Yale/courses/rotation/Dustin Scheinost/Scheinost-Lab/R/math/"
setwd(dir)
mydata <- read.table("~/raw_data/math_test_norm_no_nan", header=FALSE,
sep=",")
mydata <- read.table("/raw_data/math_test_norm_no_nan", header=FALSE,
sep=",")
mydata <- read.table("./raw_data/math_test_norm_no_nan", header=FALSE,
sep=",")
mydata <- read.table("../raw_data/math_test_norm_no_nan", header=FALSE,
sep=",")
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
mydata <- read.table("/Users/pengkailong/Desktop/Yale/courses/rotation/Dustin Scheinost/Scheinost-Lab/R/math/raw_data/math_test_norm_no_nan", header=FALSE, sep=",")
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
mydata <- read.table("/Users/pengkailong/Desktop/Yale/courses/rotation/Dustin Scheinost/Scheinost-Lab/R/math/raw_data/math_test_norm_no_nan.txt", header=FALSE, sep=",")
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
mydata <- read.table("/Users/pengkailong/Desktop/Yale/courses/rotation/Dustin Scheinost/Scheinost-Lab/R/math/math/raw_data/math_test_norm_no_nan.txt", header=FALSE, sep=",")
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
mydata <- read.table("/Users/pengkailong/Desktop/Yale/courses/rotation/Dustin Scheinost/Scheinost-Lab/R/math/math/raw_data/math_test_no_norm_no_nan_header.txt", header=FALSE, sep=",")
mydata <- read.table("/Users/pengkailong/Desktop/Yale/courses/rotation/Dustin Scheinost/Scheinost-Lab/R/math/math/raw_data/all_test_no_norm_nan_header.txt", header=TRUE, sep=",")
fit <- princomp(mydata, cor=TRUE)
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
math <- read.table("/Users/pengkailong/Desktop/Yale/courses/rotation/Dustin Scheinost/Scheinost-Lab/R/math/math/raw_data/math_test_no_norm_no_nan_header.txt", header=FALSE, sep=",")
all_data <- read.table("/Users/pengkailong/Desktop/Yale/courses/rotation/Dustin Scheinost/Scheinost-Lab/R/math/math/raw_data/all_test_no_norm_nan_header.txt", header=TRUE, sep=",")
fit <- princomp(math, cor=TRUE)
summary(fit) # print variance accounted for
fit <- princomp(math, cor=TRUE)
math
View(math)
fit <- princomp(math, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
# Varimax Rotated Principal Components
# retaining 5 components
library(psych)
fit <- principal(math, nfactors=5, rotate="varimax")
fit # print results
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(math, 3, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(math),cex=.7) # add variable names
# Principal Axis Factor Analysis
library(psych)
fit <- factor.pa(math, nfactors=3, rotation="varimax")
fit # print results
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(math)) # get eigenvalues
ap <- parallel(subject=nrow(math),var=ncol(math),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
# PCA Variable Factor Map
library(FactoMineR)
result <- PCA(math) # graphs generated automatically
# Simple CFA Model
library(sem)
